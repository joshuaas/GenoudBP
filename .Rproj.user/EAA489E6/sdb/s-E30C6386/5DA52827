{
    "contents" : "#'@description main function for genoud modeling\n#'@description : this function will build an ANN model based on  the given data using genoud algorithm to\n#'optimize BP neuron network \n#'@param df : the dataset used to build the model\n#'@param separated: whether the dataset df is separated\n#'@param ratio : the ratio for training data\n#'@param lambda : see genoudBP\n#'@param hid_num :see genoudBP\n#'@param maxiter : see genoudBP\n#'@param BFGS see genoudBP\n#'@return model the genoudBP object generated based on traing data\n#'@return roc_train : roc performance on traning data\n#'@return roc_test  : roc performance on test    data\n\nGenoudBPModeler <- function(df,separated =F,cluster =F,ratio = 0.85,lambda =0.2,hid_num,maxiter =100,BFGS=F,...){\n\n        if(!separated){\n            df <- dataSeparation(df,ratio)\n        \n        }\n        \n        model <- genoudBp(train_x = df$train_x, train_y = df$train_y, multi = df$multi,\n                          n_out = df$n_out, center = df$center, scale = df$std\n                          ,hid_num = hid_num ,maxiter = maxiter, lambda =lambda, cluster = cluster,BFGS =BFGS)\n        \n        roc_train <- performanceEval(model, df$train_x , df$train_y , scaled = T, \"training data\")\n        roc_test <- performanceEval(model, df$test_x, df$test_y, scaled = T, \"test data\")\n        \n        list(model =model, roc_train = roc_train, roc_test = roc_test, dataset =df, center = df$center, scale  = df$scale)\n\n}",
    "created" : 1420197607672.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1468727310",
    "id" : "5DA52827",
    "lastKnownWriteTime" : 1420188607,
    "path" : "~/GenoudBP/R/GenoudModeler.R",
    "project_path" : "R/GenoudModeler.R",
    "properties" : {
    },
    "source_on_save" : false,
    "type" : "r_source"
}